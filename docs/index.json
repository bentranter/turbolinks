{"repository_name":"github.com/bentranter/turbolinks","body":"# Turbolinks\n\n[![Build Status](https://travis-ci.org/bentranter/turbolinks.svg?branch=master)](https://travis-ci.org/bentranter/turbolinks) [![License](https://img.shields.io/github/license/bentranter/turbolinks.svg)](https://github.com/bentranter/turbolinks/blob/master/LICENSE)\n\nCrystal engine for Turbolinks integration. Extends `HTTP::Handler`, so you can use it as middleware in any web application. Don't forget to grab the [frontend code for Turbolinks](https://github.com/turbolinks/turbolinks).\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  turbolinks:\n    github: bentranter/turbolinks\n```\n\n## Warning\n\nThe `Location` header that is provided on a redirect after a form submit is used to set the value of  `location` in `Turbolinks.visit(location)`. This value is current **not escaped** and opens you up to JS injection -- please escape this value manually, or wait until a fix is pushed to this repo.\n\n## Usage\n\nTurbolinks extends `HTTP::Handler`, so it can be used as HTTP middleware. You can use it with the standard library like so:\n\n```crystal\nrequire \"http/server\"\nrequire \"turbolinks\"\n\nHTTP::Server.new(\"127.0.0.1\", 3000, [\n  Turbolinks::Handler.new,\n]).listen\n```\n\nor with a framework that supports standard HTTP middleware. For example, you can use Turbolinks with Kemal like so:\n\n```crystal\nrequire \"kemal\"\nrequire \"turbolinks\"\n\n# Calling `add_handler` is Kemal's way of registering HTTP middleware.\nadd_handler Turbolinks::Handler.new\n\nget \"/\"\n  \"Served by Turbolinks!\"\nend\n\nKemal.run\n```\n\n## Development\n\nTurbolinks follows the typical Crystal project structure, so cloning the repo and making changes is all you need to do. However, you're encouraged to run this backend alongside the Turbolinks frontend to make sure it works as expected, especially when compared to the Rails backend. The Turbolinks frontend is available at [github.com/turbolinks/turbolinks](https://github.com/turbolinks/turbolinks), and the Rails gem is available at [github.com/turbolinks/turbolinks-rails](https://github.com/turbolinks/turbolinks-rails).\n\n## Contributing\n\n1. Fork it ( https://github.com/[your-github-name]/turbolinks/fork )\n1. Create your feature branch (git checkout -b my-new-feature)\n1. Make sure the tests pass, adding any necessary new tests\n1. Format your code with `crystal tool format`\n1. Commit your changes (git commit -am 'Add some feature')\n1. Push to the branch (git push origin my-new-feature)\n1. Create a new Pull Request\n\n## Contributors\n\n- [bentranter](https://github.com/bentranter) Ben Tranter - creator, maintainer\n\n## License\n\nThe MIT License (MIT). Copyright (c) 2017 Ben Tranter. See the [LICENSE](/LICENSE) for more info.\n","program":{"html_id":"github.com/bentranter/turbolinks/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/bentranter/turbolinks","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/bentranter/turbolinks/Turbolinks","path":"Turbolinks.html","kind":"module","full_name":"Turbolinks","name":"Turbolinks","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"turbolinks/version.cr","line_number":1,"url":"https://github.com/bentranter/turbolinks/blob/2bc88aafe4d014867512e00a5333b22b286c14e2/src/turbolinks/version.cr"},{"filename":"turbolinks.cr","line_number":7,"url":"https://github.com/bentranter/turbolinks/blob/2bc88aafe4d014867512e00a5333b22b286c14e2/src/turbolinks.cr"}],"repository_name":"github.com/bentranter/turbolinks","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Turbolinks a module that provides HTTP middleware to be used with\nTurbolinks powered frontends. It handles form submission, and redirection.","summary":"<p>Turbolinks a module that provides HTTP middleware to be used with Turbolinks powered frontends.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/bentranter/turbolinks/Turbolinks/Handler","path":"Turbolinks/Handler.html","kind":"class","full_name":"Turbolinks::Handler","name":"Handler","abstract":false,"superclass":{"html_id":"github.com/bentranter/turbolinks/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/bentranter/turbolinks/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/bentranter/turbolinks/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/bentranter/turbolinks/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"turbolinks.cr","line_number":22,"url":"https://github.com/bentranter/turbolinks/blob/2bc88aafe4d014867512e00a5333b22b286c14e2/src/turbolinks.cr"}],"repository_name":"github.com/bentranter/turbolinks","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/bentranter/turbolinks/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/bentranter/turbolinks/Turbolinks","kind":"module","full_name":"Turbolinks","name":"Turbolinks"},"doc":"A handler that handles form submission and redirection for Turbolinks\nenabled frontends. It does nothing if the frontend is not using\nTurbolinks, so it can safely be used as HTTP middleware for any\napplication.\n\nUse like you would use any HTTP middleware:\n\n    require \"http/server\"\n    require \"turbolinks\"\n\n    HTTP::Server.new(\"127.0.0.1\", 3000, [\n      Turbolinks::Handler.new,\n    ]).listen\n","summary":"<p>A handler that handles form submission and redirection for Turbolinks enabled frontends.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":"Executes the middleware. This function is called by the HTTP server\nafter you've registered it as middleware, so you won't need to use this\nfunction directly.","summary":"<p>Executes the middleware.</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/bentranter/turbolinks/blob/2bc88aafe4d014867512e00a5333b22b286c14e2/src/turbolinks.cr#L30","source_link":"https://github.com/bentranter/turbolinks/blob/2bc88aafe4d014867512e00a5333b22b286c14e2/src/turbolinks.cr#L30","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if context.request.headers.get?(\"Turbolinks-Referrer\")\nelse\n  return call_next(context)\nend\nif context.request.method == \"POST\"\n  call_next(context)\n  post(context)\n  return\nend\ncheck_redirect(context)\ncall_next(context)\nget(context)\n"}}],"macros":[],"types":[]}]}]}}